str(crime)
crime<-read.csv('E:/Rprojects/RaleighCrime/Raleigh Crime Original Data.gz')
getWd()
getwd()
setwd("E:/Rprojects/RaleighCrime")
setwd("E:/Rprojects/RaleighCrime")
setwd("F:/Rprojects/RaleighCrime")
crime<-read.csv('F:/Rprojects/RaleighCrime/Raleigh Crime Original Data.gz')
str(crime)
head(crime)
unique(crime$crime_category)#returns all unique types in the column
ix_r =which(crime$crime_category == "BURGLARY/RESIDENTIAL")
ix_c = which(crime$crime_category == "BURGLARY/COMMERCIAL")
ix <- c(ix_c, ix_r)
C <crime[ix,]
C <-crime[ix,]
dim(C)
dim(crime)
length(ix_c)
unique(crime$reported_year)
ix_year<- which(crime_reported_year== 2019)
ix_year<- which(crime$reported_year== 2019)
ix <- intersect(c(ix_c, ix_r), ix_y)
ix <- intersect(c(ix_c, ix_r), ix_year)
C <-crime[ix,]
dim(C)
?for
}
help(for)
x <-matrix(0, 7, 24)
#days_of_week= c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")
days_of_week = unique(crime$reported_dayofwk)
for (i in 1:7){
for (j in 0:23){
ix_day=which(crime$reported_dayofwk == days_of_week)
ix_hour = which(crime$reported_hour==j)
X[i,j] = length(interesect(ix_day, ix_hour))
}
}
write.csv(X, file= "BurglaryCounts.csvS")
xc <-matrix(0, 7, 24)
xr <-matrix(0, 7, 24)
#days_of_week= c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")
days_of_week = unique(crime$reported_dayofwk)
for (i in 1:7){
for (j in 0:23){
ix_day=which(crime$reported_dayofwk == days_of_week)
ix_hour = which(crime$reported_hour==j)
Xr[i,j] = length(interesect(ix_day, ix_hour, ix_r))
Xc[i,j] = length(interesect(ix_day, ix_hour, ix_c))
}
}
write.csv(X, file= "BurglaryCounts.csvS")
for (i in 1:7){
for (j in 0:23){
ix_day=which(crime$reported_dayofwk == days_of_week)
ix_hour = which(crime$reported_hour==j)
Xr[i,j] = length(interesect(intersect(ix_day, ix_hour), ix_r))
Xc[i,j] = length(interesect(intersect(ix_day, ix_hour), ix_c))
}
}
xc <-matrix(0, 7, 24)
xr <-matrix(0, 7, 24)
#days_of_week= c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")
days_of_week = unique(crime$reported_dayofwk)
for (i in 1:7){
for (j in 0:23){
ix_day=which(crime$reported_dayofwk == days_of_week)
ix_hour = which(crime$reported_hour==j)
Xr[i,j+1] = length(interesect(intersect(ix_day, ix_hour), ix_r))
Xc[i,j+1] = length(interesect(intersect(ix_day, ix_hour), ix_c))
}
}
for (i in 1:7){
for (j in 0:23){
ix_day=which(crime$reported_dayofwk == days_of_week)
ix_hour = which(crime$reported_hour==j)
Xr[i,j+1] = length(intersect(intersect(ix_day, ix_hour), ix_r))
Xc[i,j+1] = length(intersect(intersect(ix_day, ix_hour), ix_c))
}
}
for (i in 1:7){
for (j in 0:23){
ix_day=which(crime$reported_dayofwk == days_of_week)
ix_hour = which(crime$reported_hour==j)
xr[i,j+1] = length(intersect(intersect(ix_day, ix_hour), ix_r))
xc[i,j+1] = length(intersect(intersect(ix_day, ix_hour), ix_c))
}
}
for (i in 1:7){
for (j in 0:23){
ix_day=which(crime$reported_dayofwk == days_of_week[i])
ix_hour = which(crime$reported_hour==j)
xr[i,j+1] = length(intersect(intersect(ix_day, ix_hour), ix_r))
xc[i,j+1] = length(intersect(intersect(ix_day, ix_hour), ix_c))
}
}
xr
write.csv(xr, file= "ResBurglaryCounts.csv")
write.csv(xc, file= "ComBurglaryCounts.csv")
crime<-read.csv('F:/Rprojects/RaleighCrime/Raleigh Crime Original Data.gz')
str(crime)
head(crime)
summary(crime)
unique(crime$crime_category)#returns all unique types in the column
##extracted burglary res and commerce
ix_r =which(crime$crime_category == "BURGLARY/RESIDENTIAL")
ix_c = which(crime$crime_category == "BURGLARY/COMMERCIAL")
table(crime$crime_type)
table(crime$crime_category)
table(crime$crime_category) > 1000
which(table(crime$crime_category) > 1000)
is_large_enough <-function(c){
if (table(crime$crime_category)>1000){
return (TRUE)
}
}
consolidated_crimes<-which(is_large_enough(crimes$crime_category))
consolidated_crimes<-which(table(crimes$crime_category)>1000)
consolidated_crimes<-which(table(crime$crime_category)>1000)
consolidated_crimes
table(consolidated_crimes)
table(consolidated_crimes$category)
str(consolidated_crimes)
ixconsolidated<-which(table(crime$crime_category)>1000)
for (i in 1:length(ixconsolidated)){
consolidated[i] = crimes[ixconsolidated[i]]
}
ixconsolidated<-which(table(crime$crime_category)>1000)
for (i in 1:length(ixconsolidated)){
consolidated[i] = crime[ixconsolidated[i]]
}
consolidated =[]
ixconsolidated<-which(table(crime$crime_category)>1000)
for (i in 1:length(ixconsolidated)){
consolidated[i] = crime[ixconsolidated[i]]
}
consolidated= c()
ixconsolidated<-which(table(crime$crime_category)>1000)
for (i in 1:length(ixconsolidated)){
consolidated[i] = crime[ixconsolidated[i]]
}
ixconsolidated<-which(table(crime$crime_category)>1000)
consolidated <- crime[ixconsolidated,]
head(consolidated)
table(condolidated)
table(consolidated)
table(consolidated$crime_category)
which(table(crime$crime_category) > 1000)
ixconsolidated<-which(table(crime$crime_category)>1000)
ixconsolidated
crime[ixconsolidated]
table(ixconsolidated)
str(ixconsolidated)
dim(ixconsolidated)
consolidated$crime_category
crime$crime_category
consolidated$crime_category
dim(consolidated)
dim(crime)
ixconsolidated<-which(table(crime$crime_category)>1000)
length(ixconsolidated)
ixconsolidated
names(ixconsolidated)
ix2 <- which(crime$crime_category %in% names(ixconsolidated))
length(ix2)
indexes<-which(crime$crime_category %in% names(ixconsolidated))
length(indexes)
consolidated <- crime[indexes,]
str(consolidated)
table(consolidated)
head(consolidated)
table(consolidated$crime_category)
names(consolidated)
head(consolidated$crime_description)
names(crime$crime_category)
crime$crime_category
unique(crime$crime_category)
ixconsolidated<-which(and((table(crime$crime_category)>1000),crime$crime_category!='ALL OTHER OFFENSES'))
ixconsolidated<-which((table(crime$crime_category)>1000)&&crime$crime_category!='ALL OTHER OFFENSES')
indexes<-which(crime$crime_category %in% names(ixconsolidated))
consolidated <- crime[indexes,]
consolidated$crime_category
unique(consolidated$crime_category)
unique(crime$crime_category)
help("remove")
help("erase.screen")
ixconsolidated<-which(table(crime$crime_category)>1000)
ixconsolidated<which(ixconsolidated!=4)
indexes<-which(crime$crime_category %in% names(ixconsolidated))
consolidated <- crime[indexes,]
unique(consolidated$crime_category)
table(consolidated$crime_category)
ixconsolidated<-which(table(crime$crime_category)>1000)
indexes<-which(crime$crime_category %in% names(ixconsolidated))
consolidated <- crime[indexes,]
table(consolidated$crime_category)
head(crime$latitude)
crime$latitude[0:50]
crime$latitude[0:200]
crime$latitude[300:1000]
unique(crime$latitude)
crime$latitude[1:200]
length(which(crime$latitude!='NA'))
length(which(crime$longitude!='NA'))
ixassault <-which(crime$latitude!='NA')
assault<-crime[assault_with_location]
ixassault <-which(crime$crime_category = 'ASSAULT')
ixlocation <- which(crime$latitude!='NA')
assault_with_location<- which(intersect(ixassault, ixlocation))
assault<-crime[assault_with_location]
ixassault <-which(crime$crime_category == 'ASSAULT')
ixlocation <- which(crime$latitude!='NA')
assault_with_location<- which(intersect(ixassault, ixlocation))
assault_with_location<- intersect(ixassault, ixlocation)
assault<-crime[assault_with_location]
assault<-crime[assault_with_location,]
head(assault)
length(assault)
dim(assault)
length(unique(crime$longitude))
length(unique(assault$longitude))
length(unique(assault$latitude))
plot(assault$latitude, assault$longitude)
plot(assault$longitude, assault$latitude)
help(bins)
summary(assault$latitude)
summary(assault$longitude)
MM = matrix(0, 2,2)
MM
MM[1,1] = 1
which(c(MM) ==- 0)
which(c(MM) == 0)
which(MM == 0, index.return=TRUE)
which(MM == 0, return.index=TRUE)
which(MM == 0)
MM
MM[1,1]=0
MM[2,1] = 0
which(MM==0)
MM[2,1]= 1
which(MM==0)
MM
crime
crime$new_variable <- pi
names(crimes)
names(crime)
crime$new_variable
length(assault)
head(assault)
assault[5]
head(assault[5])
dim(assault)
length(assault$latitude)
help(nim)
help(min)
help(apply)
assault$regionx = 0
assault$regiony = 0
assault$region =0
minlat = min(assault$latitude)
maxlat = max(assault$latitude)
minlong = min(assault$longitude)
maxlong = max(assault$longitude)
#normalize latitude and store as regiony 0 through 9
for (i in 1:length(asssault$latitude)){
reg = ((assault$latitude[i]-minlat)/(maxlat-minlat))*10
assault$regiony[i] = int(reg)
}
#normalize latitude and store as regiony 0 through 9
for (i in 1:length(assault$latitude)){
reg = ((assault$latitude[i]-minlat)/(maxlat-minlat))*10
assault$regiony[i] = int(reg)
}
#normalize latitude and store as regiony 0 through 9
for (i in 1:length(assault$latitude)){
reg = ((assault$latitude[i]-minlat)/(maxlat-minlat))*10
assault$regiony[i] = floor(reg)
}
head(assault$regiony)
summary(assault(regiony))
summary(assault$regiony)
#normalize longitude and store as regionx 1 through 10
for (i in 1:length(assault$longitude)){
reg = ((assault$longitude[i]-minlong)/(maxlong-minlong))*10+1
assault$regionx[i] = floor(reg)
}
#create region from regionx and region y
#region should be from 1 to 100 and as y*10+x (row major)
for (i in 1:length(assault$regionx)){
assault$region[i]= assault$regionx+(assault$regiony)*10
}
#create region from regionx and region y
#region should be from 1 to 100 and as y*10+x (row major)
for (i in 1:length(assault$regionx)){
assault$region[i]= assault$regionx[i]+(assault$regiony[i])*10
}
summary(assault$region)
#normalize latitude and store as regiony 1 through 10
for (i in 1:length(assault$latitude)){
reg = ((assault$latitude[i]-minlat)/(maxlat-minlat))*10
assault$regiony[i] = floor(reg)
}
#normalize longitude and store as regionx 1 through 10
for (i in 1:length(assault$longitude)){
reg = ((assault$longitude[i]-minlong)/(maxlong-minlong))*10
assault$regionx[i] = floor(reg)
}
#create region from regionx and region y
#region should be from 1 to 100 and as (y-1)*10+x (row major)
for (i in 1:length(assault$regionx)){
assault$region[i]= assault$regionx[i]+(assault$regiony[i]-1)*10
}
summary(assault$region)
summary(assault$regiony)
summary(assault$regionx)
#normalize latitude and store as regiony 0 through 9
for (i in 1:length(assault$latitude)){
reg = ((assault$latitude[i]-minlat)/(maxlat-minlat))*9
assault$regiony[i] = floor(reg)
}
summary(assault$regiony)
#normalize longitude and store as regionx 1 through 10
for (i in 1:length(assault$longitude)){
reg = ((assault$longitude[i]-minlong)/(maxlong-minlong))*9+1
assault$regionx[i] = floor(reg)
}
summary(assault$regionx)
#create region from regionx and region y
#region should be from 1 to 100 and as (y)*10+x (row major)
for (i in 1:length(assault$regionx)){
assault$region[i]= assault$regionx[i]+(assault$regiony[i])*10
}
summary(assault$region)
plot(assault$region)
bar(assault$region)
hist(assault$region)
plot(assault$region)
assault_counts = matrix(100, 7, 24)#region, day of the week, time of day
for (i in 1:100){
for (j in 1:7){
for(k in 1:24){
ix_region = which(assault$region == i)
ix_day=which(assault$reported_dayofwk == days_of_week[j])
ix_hour = which(assault$reported_hour==k-1)
assault_counts[i,j,k]=length(which(intersect(ix_region, intersect(ix_day, ix_hour))))
}
}
}
assault_counts = matrix(100, 7, 24)#region, day of the week, time of day
for (i in 1:100){
for (j in 1:7){
for(k in 1:24){
ix_region = which(assault$region == i)
ix_day=which(assault$reported_dayofwk == days_of_week[j])
ix_hour = which(assault$reported_hour==k-1)
count =length(intersect(ix_region, intersect(ix_day, ix_hour)))
assault_counts[i,j,k]=count
}
}
}
help(matrix)
assault_counts = matrix(0,c(100, 7, 24))#region, day of the week, time of day
for (i in 1:100){
for (j in 1:7){
for(k in 1:24){
ix_region = which(assault$region == i)
ix_day=which(assault$reported_dayofwk == days_of_week[j])
ix_hour = which(assault$reported_hour==k-1)
count =length(intersect(ix_region, intersect(ix_day, ix_hour)))
assault_counts[i,j,k]=count
}
}
}
dim(assault_counts)
help(rep)
assault_counts = array(rep(0,100*7*24),c(100, 7, 24))#region, day of the week, time of day
dim(assault_counts)
for (i in 1:100){
for (j in 1:7){
for(k in 1:24){
ix_region = which(assault$region == i)
ix_day=which(assault$reported_dayofwk == days_of_week[j])
ix_hour = which(assault$reported_hour==k-1)
count =length(intersect(ix_region, intersect(ix_day, ix_hour)))
assault_counts[i,j,k]=count
}
}
}
write.csv(assault_counts, file= "AssaultCounts.csv")
assault$reported_year
summary(assault$reported_year)
type()?
plot(assault$longitude, assault$latitude)
str(assault)
help(rep)
assault_counts
sum(assault_counts[1,:,5])
sum(assault_counts[1,,5])
sum(assault_counts[6,,5])
sum(assault_counts[50,,5])
sum(assault_counts[,2,5])
sum(assault_counts[,7,5])
sum(assault_counts[,7,60])
sum(assault_counts[,7,20])
assault_counts(50, 3, 15)
assault_counts[50, 3, 15]
assault_counts[50, 3, 19]
sum(assault_counts[, 3, 19])
